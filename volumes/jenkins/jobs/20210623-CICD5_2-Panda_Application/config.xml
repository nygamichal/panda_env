<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.42">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Assign agent which will be used during build (slave)&#xd;
Automatic installation of Maven&#xd;
&#xd;
Build steps:&#xd;
- Clean the already running version of the application (only if it exists)&#xd;
- Download source code from the repository.&#xd;
- Build code and test by Junit&#xd;
- Build docker image with the application.&#xd;
- Run application.&#xd;
- Selenium tests.&#xd;
- Push artifact into Artifcatory.&#xd;
- Each time clean application and workspace.</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.94">
    <script>pipeline {
    agent {
         label &apos;Slave&apos;
    }
    tools {
        // Install the Maven version configured as &quot;M3&quot; and add it to the path.
        maven &quot;m3&quot;
    }
    environment{
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
    }
    stages {
        stage(&apos;Clear running apps&apos;) {
            steps {
                //Clean previous instances of app built
                sh &apos;docker rm -f pandaapp || true&apos;
            }
        }
        stage(&apos;Get Code&apos;) {
            steps {
                //Get some code from a GitHub repository.
                git branch: &apos;pipeline&apos;, url: &apos;https://github.com/nygamichal/panda_applicationALL.git&apos;
            }
        }
        stage(&apos;Build and Junit&apos;) {
            steps {
                //Run Maven on a Unix agent.
                sh &apos;mvn clean install&apos;
            }
        }
        stage(&apos;Build Docker image&apos;){
            steps {
                sh &apos;mvn package -Pdocker -Dmaven.test.skip=true&apos;
            }
        }
        stage(&apos;Run Docker app&apos;) {
            steps {
                sh &apos;docker run -d -p 0.0.0.0:8080:8080 --name pandaapp -t ${IMAGE}:${VERSION}&apos;
            }
        }
        stage(&apos;Test Selenium&apos;) {
            steps {
                sh &apos;mvn test -Pselenium&apos;
            }
        }
        stage(&apos;Deploy jar to artifactory&apos;) {
            steps {
                configFileProvider([configFile(fileId: &apos;73db171a-2bf5-442b-9e85-0ca67787a243&apos;, variable: &apos;mavensettings&apos;)]) {
                    sh &apos;mvn -s $mavensettings deploy -Dmaven.test.skip=true -e&apos;
                }
            }
        } 
    }
                post {
                always { 
                    sh &apos;docker stop pandaapp&apos;
                    deleteDir() //Clean workspace
                }
            }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>